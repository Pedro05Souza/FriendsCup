datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Player {
    id            String         @id @default(uuid())
    name          String
    intelligence  Int
    defense       Int
    attack        Int
    mentality     Int
    createdAt     DateTime       @default(now()) @map("created_at")
    championships Championship[]
    matches       Match[]
    groupPlayers  GroupPlayer[]
    duoPlayer1    Duo[]          @relation("DuoPlayer1")
    duoPlayer2    Duo[]          @relation("DuoPlayer2")

    @@map("player")
}

model MatchScore {
    id           String @id @default(uuid())
    match        Match? @relation(fields: [matchId], references: [id])
    matchId      String @unique @map("match_id")
    score        Int
    penaltyScore Int?   @map("penalty_score")

    @@map("match_score")
}

model Championship {
    id        String              @id @default(uuid())
    title     String
    createdAt DateTime            @map("created_at")
    matches   Match[]
    players   Player[]
    duos      Duo[]
    groups    ChampionshipGroup[]
    isDuo     Boolean              @map("is_duo")

    @@map("championship")
}

model Match {
    id             String       @id @default(uuid())
    championship   Championship @relation(fields: [championshipId], references: [id])
    championshipId String       @map("championship_id")
    player         Player?      @relation(fields: [playerId], references: [id])
    playerId       String?      @map("player_id")
    duo            Duo?         @relation(fields: [duoId], references: [id])
    duoId          String?      @map("duo_id")
    score          MatchScore?
    matchPhase     String       @map("match_phase")

    @@map("match")
}

model GroupPlayer {
    id                  String            @id @default(uuid())
    player              Player?           @relation(fields: [playerId], references: [id])
    playerId            String?           @map("player_id")
    duo                 Duo?              @relation(fields: [duoId], references: [id])
    duoId               String?           @map("duo_id")
    championshipGroup   ChampionshipGroup @relation(fields: [championshipGroupId], references: [id])
    championshipGroupId String            @map("championship_group_id")
    points              Int               @default(0)
    goalDifference      Int               @default(0) @map("goal_difference")

    @@map("group_player")
}

model ChampionshipGroup {
    id             String        @id @default(uuid())
    championship   Championship  @relation(fields: [championshipId], references: [id])
    championshipId String        @map("championship_id")
    groupPlayers   GroupPlayer[]
    createdAt      DateTime      @default(now()) @map("created_at")

    @@map("championship_group")
}

model Duo {
    id             String        @id @default(uuid())
    player1        Player        @relation("DuoPlayer1", fields: [player1Id], references: [id])
    player1Id      String        @map("player_1_id")
    player2        Player        @relation("DuoPlayer2", fields: [player2Id], references: [id])
    player2Id      String        @map("player_2_id")
    championship   Championship  @relation(fields: [championshipId], references: [id])
    championshipId String        @map("championship_id")
    matches        Match[]
    groupPlayers   GroupPlayer[]

    @@unique([player1Id, player2Id, championshipId])
    @@map("duo")
}
